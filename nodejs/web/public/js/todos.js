// Generated by CoffeeScript 1.6.3
(function() {
  Behavior2.Class('app', 'div.todoapp', {
    keypress: {
      'input#new-todo': 'create',
      'input.edit': 'edit'
    },
    click: {
      'input.toggle': 'toggle',
      'button.destroy': 'delete',
      'input#toggle-all': 'submit'
    },
    dblclick: {
      '.todo-text': 'showEditor'
    },
    blur: {
      'input.edit': 'hideEditor'
    }
  }, function($ctx, that) {
    var $activeEditor, $footer, $list, $toggle, ajax, plainSave, renderItem, renderUI, updateUI;
    $list = $ctx.find('#todo-list');
    $toggle = $ctx.find('input#toggle-all');
    $footer = $ctx.find('#footer');
    $activeEditor = $([]);
    ajax = function(e, method, cb) {
      var $form, itemId;
      $form = $(e.currentTarget).closest('form');
      itemId = $form.data('id');
      return $.ajax({
        url: "/item/" + itemId + "/",
        dataType: 'json',
        method: method,
        data: $form.serializeArray()
      }).done(function(data) {
        return cb(data, itemId, $form);
      });
    };
    renderItem = function(data) {
      $footer.html(X.macro('footer', data.content.footer, 'todo.html'));
      return X.macro('todoItem', data.content.item, 'todo.html');
    };
    plainSave = function(e, cb) {
      e.preventDefault();
      return ajax(e, 'put', function(data, itemId, $form) {
        $form.replaceWith(renderItem(data));
        return cb();
      });
    };
    renderUI = function() {
      var $checks, doneItems, totalItems;
      $checks = $ctx.find('input.toggle');
      totalItems = $checks.length;
      doneItems = $checks.filter(':checked').length;
      return $toggle.prop('checked', totalItems === doneItems);
    };
    updateUI = function(fn) {
      return function(e) {
        return fn(e, renderUI);
      };
    };
    that.save = updateUI(plainSave);
    that.toggle = updateUI(function(e, cb) {
      var $form, $target, itemId;
      e.preventDefault();
      $target = $(e.currentTarget);
      $form = $target.closest('form');
      itemId = $form.data('id');
      return $.ajax({
        url: "/setCompleted/" + itemId + "/",
        dataType: 'json',
        method: 'put',
        data: $form.serializeArray()
      }).done(function(data) {
        $form.replaceWith(renderItem(data));
        return cb();
      });
    });
    that.create = updateUI(function(e, cb) {
      var $target, val;
      if (e.keyCode === 13) {
        $target = $(e.currentTarget);
        val = $target.val();
        if ($.trim(val) === '') {
          return X.flash({
            'error': ['You must enter a description']
          });
        } else {
          return $.post("/create/", {
            description: val
          }, function(data) {
            $list.prepend(renderItem(data));
            $target.val('');
            return cb();
          });
        }
      }
    });
    that["delete"] = updateUI(function(e, cb) {
      e.preventDefault();
      return ajax(e, 'delete', function(data, itemId, $form) {
        $form.remove();
        return cb();
      });
    });
    that.submit = function(e) {
      var $form, $target;
      e.preventDefault();
      $target = $(e.currentTarget);
      $form = $target.closest('form');
      return $form.submit();
    };
    that.showEditor = function(e) {
      var $li, $target;
      $target = $(e.currentTarget);
      $li = $target.closest('li');
      $activeEditor.removeClass('editing');
      $activeEditor = $li;
      $li.addClass('editing');
      return $li.find('.todo-input').focus().val($target.text());
    };
    that.hideEditor = function(e) {
      return $(e.currentTarget).closest('li').removeClass("editing");
    };
    that.edit = function(e) {
      if (e.keyCode === 13) {
        e.preventDefault();
        that.save(e);
        return that.hideEditor(e);
      }
    };
  });

}).call(this);
